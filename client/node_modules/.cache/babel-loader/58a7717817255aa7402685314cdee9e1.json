{"ast":null,"code":"var _jsxFileName = \"/home/suraj/dev/blockchain/shippingDapp/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport ItemManagerContract from \"./contracts/ItemManager.json\";\nimport ItemContract from \"./contracts/Item.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loaded: false\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        this.web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        this.accounts = await this.web3.eth.getAccounts(); // Get the contract instance.\n\n        this.networkId = await this.web3.eth.net.getId();\n        this.itemManager = new web3.eth.Contract(ItemManagerContract.abi, ItemManagerContract.networks[networkId] && ItemManagerContract.networks[networkId].address);\n        this.item = new web3.eth.Contract(ItemContract.abi, ItemContract.networks[networkId] && ItemContract.networks[networkId].address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          loaded: true\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"line 42\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/suraj/dev/blockchain/shippingDapp/client/src/App.js"],"names":["React","Component","ItemManagerContract","ItemContract","getWeb3","App","state","loaded","componentDidMount","web3","accounts","eth","getAccounts","networkId","net","getId","itemManager","Contract","abi","networks","address","item","setState","runExample","error","alert","console","contract","methods","set","send","from","response","get","call","storageValue","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ItemManagerContract from \"./contracts/ItemManager.json\";\nimport ItemContract from \"./contracts/Item.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded:false };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n      this.itemManager = new web3.eth.Contract(\n        ItemManagerContract.abi,\n        ItemManagerContract.networks[networkId] && ItemManagerContract.networks[networkId].address,\n      );\n\n      this.item = new web3.eth.Contract(\n        ItemContract.abi,\n        ItemContract.networks[networkId] && ItemContract.networks[networkId].address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ loaded:true }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}